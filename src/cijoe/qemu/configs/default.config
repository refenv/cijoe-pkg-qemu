---
transport:
  ssh:  # The SSH options are passed verbatim to paramiko; see https://www.paramiko.org/
    hostname: localhost
    port: 4200
    username: root
    password: root

os:
  name: 'debian'
  version: 'bullseye'

# cloudinit:
# These are used by joe.qemu.wrapper.Guest().cloudinit() and the worklet "qemu.guest_provision" to
# "provision" a guest with the given OS. That is, boot it up, configure the OS, then shut it down
# ready for use.
# The 'joe.qemu.auxilary' files provide initialization-files (user-data and meta-data) and a
# "trick" to inject a public-key into the guest.
cloudinit:
  bullseye:
    url: "https://cloud.debian.org/images/cloud/bullseye/daily/latest/debian-11-generic-amd64-daily.qcow2"
    img: "{{ local.env.HOME}}/images/cloudinit/debian-11-generic-amd64-daily.qcow2"
    meta: "{{ resources.auxilary['qemu.cloudinit-debian-bullseye-meta'] }}"
    user: "{{ resources.auxilary['qemu.cloudinit-debian-bullseye-user'] }}"
#    pubkey: "keys/guest_key.pub"

  freebsd:
    url: "https://refenv.fra1.digitaloceanspaces.com/freebsd13-ufs-ksrc.qcow2"
    img: "{{ local.env.HOME}}/images/cloudinit/freebsd13-ufs-ksrc.qcow2"
    meta: "{{ resources.auxilary['qemu.cloudinit-freebsd-13-meta'] }}"
    user: "{{ resources.auxilary['qemu.cloudinit-freebsd-13-user'] }}"
#    pubkey: "keys/guest_key.pub"

# boot_images:
# qemu images, could be cloudinit images which have been processed through initialization process
boot_images:
  bullseye:
    url: "https://refenv.fra1.digitaloceanspaces.com/boot_images/debian-bullseye-amd64.qcow2"
    img: "{{ local.env.HOME}}/images/boot_images/debian-bullseye-amd64.qcow2"

  freebsd:
    url: "https://refenv.fra1.digitaloceanspaces.com/boot_images/freebsd-13-amd64.qcow2"
    img: "{{ local.env.HOME}}/images/boot_images/freebsd-13-amd64.qcow2"

# qemu:
qemu:
  repository:
    upstream: "https://github.com/qemu/qemu.git"
    path: "{{ local.env.HOME }}/git/qemu"
    tag: "v7.1.0"

  build:
    prefix: "{{ local.env.HOME }}/opt/qemu"

#  system_bin: "/opt/qemu/bin/qemu-system-x86_64"
  system_bin: "{{ local.env.HOME }}/opt/qemu/bin/qemu-system-x86_64"
  img_bin: "{{ local.env.HOME }}/opt/qemu/bin/qemu-img"

  guests:
    bullseye:
      path: "{{ local.env.HOME }}/guests/bullseye-amd64"

      boot_img: "bullseye"
      cloudinit: "bullseye"

      # Plain qemu-system arguments (-cpu, -machine, -smp, etc), the
      # sub-keys are e.g. "-machine type=..."
      system_args:
        machine:
          type: "q35,kernel_irqchip=split,accel=kvm"
        cpu: "host"
        smp: 4
        m: "6G"
        device: "intel-iommu,pt=on,intremap=on"

      # These are 'fancy' arguments, with special handling in the joe.core.qemu.wrapper.Guest()
      fancy:
        # host_share: enables the the guest to mount a directory from the host by running:
        # "mount -t 9p -o trans=virtio hostshare foo -oversion=9p2000.L"
        #host_share: "{{ local.env.HOME }}/git"

        # kernel: boot a linux kernel directly
        kernel:
          # image: the kernel image to boot
          image: "{{ local.env.HOME }}/git/linux/arch/x86_64/boot/bzImage"

          # share: set to allow the kernel to load modules
          share: "{{ local.env.HOME }}/git/linux"

        # tcp_forward: enables the host access to the 'guest' port via the 'host' port. Useful for
        # doing things like SSH-ing into the guest
        tcp_forward:
          host: 4200
          guest: 22

      # This string is appended to the end of the qemu-system command-line, a wildcard for whatever
      # you need. You can also consider writing a worklet to serve your needs. See the
      # "qemu.guest_start" and "qemu.guest_start_nvme" worklets for reference.
      extra_args: ""
